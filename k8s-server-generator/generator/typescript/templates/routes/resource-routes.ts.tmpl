import { Router, Request, Response, NextFunction } from 'express';
import { logger } from '../logger';
import storage from '../storage';
import { StorageError } from '../storage/StorageError';

/**
 * Create API routes
 */
export function createAPIRoutes(): Router {
  const router = Router();

  // Add Kubernetes API service discovery endpoints
  
  // Replace the hardcoded API service discovery endpoints with the dynamic ones based on IR data

  // Replace the API version discovery endpoint
  router.get('/api', (req, res) => {
    logger.debug('GET /api called');
    
    // Return API version information dynamically based on IR
    const versions = ["v1"];
    
    res.json({
      kind: "APIVersions",
      versions: versions,
      serverAddressByClientCIDRs: [
        {
          clientCIDR: "0.0.0.0/0",
          serverAddress: req.headers.host || "localhost"
        }
      ]
    });
  });

  // Replace the API group discovery endpoint
  router.get('/apis', (req, res) => {
    logger.debug('GET /apis called');
    
    // Extract API groups from IR data
    const groups = [];
    const groupVersions = {};
    
    // Collect all group/versions from endpoints
    {{- range .Endpoints }}
    {{- if hasSubstring .Path "/apis/" }}
    {{- $parts := split .Path "/" }}
    {{- if ge (len $parts) 4 }}
    {{- $group := index $parts 3 }}
    {{- if ge (len $parts) 5 }}
    {{- $version := index $parts 4 }}
    // Add group/version if not already added
    if (!groupVersions["{{ $group }}/{{ $version }}"]) {
      groupVersions["{{ $group }}/{{ $version }}"] = true;
      
      // Check if group already exists in groups array
      let groupExists = false;
      for (const g of groups) {
        if (g.name === "{{ $group }}") {
          // Add version if not already in the group
          let versionExists = false;
          for (const v of g.versions) {
            if (v.version === "{{ $version }}") {
              versionExists = true;
              break;
            }
          }
          
          if (!versionExists) {
            g.versions.push({
              groupVersion: "{{ $group }}/{{ $version }}",
              version: "{{ $version }}"
            });
          }
          
          groupExists = true;
          break;
        }
      }
      
      // Add new group if it doesn't exist
      if (!groupExists) {
        groups.push({
          name: "{{ $group }}",
          versions: [
            {
              groupVersion: "{{ $group }}/{{ $version }}",
              version: "{{ $version }}"
            }
          ],
          preferredVersion: {
            groupVersion: "{{ $group }}/{{ $version }}",
            version: "{{ $version }}"
          }
        });
      }
    }
    {{- end }}
    {{- end }}
    {{- end }}
    {{- end }}
    
    res.json({
      kind: "APIGroupList",
      apiVersion: "v1",
      groups: groups
    });
  });

  // Replace the Core API resources discovery endpoint
  router.get('/api/v1', (req, res) => {
    logger.debug('GET /api/v1 called');
    
    // Extract core API resources from IR data
    const resources = [];
    const resourceMap = {};
    
    // Collect all resources from endpoints
    {{- range .Endpoints }}
    {{- if hasSubstring .Path "/api/v1/" }}
    {{- $parts := split .Path "/" }}
    {{- if ge (len $parts) 4 }}
    {{- $resourceType := index $parts 3 }}
    {{- if and (ne $resourceType "") (ne $resourceType ":resourceType") }}
    // Add resource if not already added
    if (!resourceMap["{{ $resourceType }}"]) {
      resourceMap["{{ $resourceType }}"] = true;
      
      resources.push({
        name: "{{ $resourceType }}",
        singularName: "{{ $resourceType }}",
        namespaced: {{ if hasSubstring .Path "namespaces/:namespace" }}true{{ else }}false{{ end }},
        kind: "{{ $resourceType | title }}",
        verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
      });
    }
    {{- end }}
    {{- end }}
    {{- end }}
    {{- end }}
    
    res.json({
      kind: "APIResourceList",
      apiVersion: "v1",
      groupVersion: "v1",
      resources: resources
    });
  });

  // Replace the group-specific API resources discovery endpoints with a dynamic handler
  {{- range .Endpoints }}
  {{- if hasSubstring .Path "/apis/" }}
  {{- $parts := split .Path "/" }}
  {{- if ge (len $parts) 5 }}
  {{- $group := index $parts 3 }}
  {{- $version := index $parts 4 }}
  {{- if and (ne $group "") (ne $version "") }}
  // Add group/version specific handler if not already added
  router.get('/apis/{{ $group }}/{{ $version }}', (req, res) => {
    logger.debug('GET /apis/{{ $group }}/{{ $version }} called');
    
    // Extract resources for this API group/version from IR data
    const resources = [];
    const resourceMap = {};
    
    // Collect all resources from endpoints for this group/version
    {{- range $.Endpoints }}
    {{- if hasSubstring .Path (printf "/apis/%s/%s/" $group $version) }}
    {{- $resourceParts := split .Path "/" }}
    {{- if ge (len $resourceParts) 6 }}
    {{- $resourceType := index $resourceParts 5 }}
    {{- if and (ne $resourceType "") (ne $resourceType ":resourceType") }}
    // Add resource if not already added
    if (!resourceMap["{{ $resourceType }}"]) {
      resourceMap["{{ $resourceType }}"] = true;
      
      resources.push({
        name: "{{ $resourceType }}",
        singularName: "{{ $resourceType }}",
        namespaced: {{ if hasSubstring .Path "namespaces/:namespace" }}true{{ else }}false{{ end }},
        kind: "{{ $resourceType | title }}",
        verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
      });
    }
    {{- end }}
    {{- end }}
    {{- end }}
    {{- end }}
    
    res.json({
      kind: "APIResourceList",
      apiVersion: "v1",
      groupVersion: "{{ $group }}/{{ $version }}",
      resources: resources
    });
  });
  {{- end }}
  {{- end }}
  {{- end }}
  {{- end }}

  // Add dynamic routes from OpenAPI spec
  {{- range .Endpoints }}
  /**
   * {{ .Summary }}
   * {{ .Description }}
   */
  router.{{ .Method }}('{{ .Path }}', async (
    req: Request<{
      name?: string;
      namespace?: string;
      resourceType?: string;
    }, any, any, {
      watch?: string;
      labelSelector?: string;
      resourceVersion?: string;
    }>,
    res: Response,
    next: NextFunction
  ) => {
    try {
      logger.debug(`{{ .Method | upper }} {{ .Path }} called with params:`, req.params);
      
      {{- if eq .Method "get" }}
      // Handle GET request
      {{- $pathParts := split .Path "/" }}
      {{- $lastPart := index $pathParts (add (len $pathParts) -1) }}
      {{- if eq $lastPart ":name" }}
      // Get single resource
      const name = req.params.name;
      if (!name) {
        return res.status(400).json({
          kind: 'Status',
          apiVersion: 'v1',
          status: 'Failure',
          message: 'Name parameter is required',
          reason: 'BadRequest',
          code: 400
        });
      }
      
      const namespace = req.params.namespace || 'default';
      const resourceType = req.params.resourceType || '{{ index .Tags 0 }}';
      
      const resource = await storage.getResource(resourceType, name, namespace);
      return res.json(resource);
      {{- else }}
      // List or watch resources
      const namespace = req.params.namespace || 'default';
      const resourceType = req.params.resourceType || '{{ index .Tags 0 }}';
      const watch = req.query.watch === 'true' || req.query.watch === '1';
      const labelSelector = req.query.labelSelector;
      const resourceVersion = req.query.resourceVersion;
      
      if (watch) {
        // Handle watch request
        // Set headers for streaming response
        res.setHeader('Content-Type', 'application/json');
        res.setHeader('Transfer-Encoding', 'chunked');
        res.setHeader('Connection', 'keep-alive');
        res.setHeader('Cache-Control', 'no-cache, no-transform');
        
        // Set up error handler
        const onError = (err: any) => {
          logger.error(`Watch error for ${resourceType}:`, err);
          
          // Send error event
          const errorEvent = {
            type: 'ERROR',
            object: {
              kind: 'Status',
              apiVersion: 'v1',
              metadata: {},
              status: 'Failure',
              message: err.message || 'Watch error',
              reason: 'InternalError',
              code: 500
            }
          };
          
          res.write(JSON.stringify(errorEvent) + '\n');
          res.end();
        };
        
        // Set up close handler
        req.on('close', () => {
          if (stopWatching) {
            stopWatching();
          }
        });
        
        // Start watching
        let stopWatching: (() => void) | null = null;
        try {
          stopWatching = await storage.watchResources(
            resourceType,
            namespace,
            labelSelector,
            resourceVersion,
            (type, resource) => {
              // Send watch event
              const event = { type, object: resource };
              res.write(JSON.stringify(event) + '\n');
            }
          );
        } catch (err) {
          onError(err);
        }
      } else {
        // Handle list request
        const resources = await storage.listResources(resourceType, namespace, labelSelector);
        return res.json({
          kind: `${resourceType}List`,
          apiVersion: 'v1',
          metadata: {
            resourceVersion: Date.now().toString()
          },
          items: resources
        });
      }
      {{- end }}
      {{- else if eq .Method "post" }}
      // Handle POST request
      const namespace = req.params.namespace || 'default';
      const resourceType = req.params.resourceType || '{{ index .Tags 0 }}';
      const resource = req.body;
      
      // Ensure the resource has the correct kind
      if (!resource.kind) {
        resource.kind = resourceType;
      }
      
      const created = await storage.createResource(resource, namespace);
      return res.status(201).json(created);
      {{- else if eq .Method "put" }}
      // Handle PUT request
      const name = req.params.name;
      if (!name) {
        return res.status(400).json({
          kind: 'Status',
          apiVersion: 'v1',
          status: 'Failure',
          message: 'Name parameter is required',
          reason: 'BadRequest',
          code: 400
        });
      }
      
      const namespace = req.params.namespace || 'default';
      const resourceType = req.params.resourceType || '{{ index .Tags 0 }}';
      const resource = req.body;
      
      // Ensure the resource has the correct kind
      if (!resource.kind) {
        resource.kind = resourceType;
      }
      
      const updated = await storage.updateResource(resourceType, name, resource, namespace);
      return res.json(updated);
      {{- else if eq .Method "patch" }}
      // Handle PATCH request
      const name = req.params.name;
      if (!name) {
        return res.status(400).json({
          kind: 'Status',
          apiVersion: 'v1',
          status: 'Failure',
          message: 'Name parameter is required',
          reason: 'BadRequest',
          code: 400
        });
      }
      
      const namespace = req.params.namespace || 'default';
      const resourceType = req.params.resourceType || '{{ index .Tags 0 }}';
      const patch = req.body;
      
      const patched = await storage.patchResource(resourceType, name, patch, namespace);
      return res.json(patched);
      {{- else if eq .Method "delete" }}
      // Handle DELETE request
      const name = req.params.name;
      if (!name) {
        return res.status(400).json({
          kind: 'Status',
          apiVersion: 'v1',
          status: 'Failure',
          message: 'Name parameter is required',
          reason: 'BadRequest',
          code: 400
        });
      }
      
      const namespace = req.params.namespace || 'default';
      const resourceType = req.params.resourceType || '{{ index .Tags 0 }}';
      
      await storage.deleteResource(resourceType, name, namespace);
      return res.status(200).json({
        kind: 'Status',
        apiVersion: 'v1',
        status: 'Success',
        message: `${resourceType} "${name}" deleted`
      });
      {{- else }}
      // Handle other methods
      return res.status(405).json({
        kind: 'Status',
        apiVersion: 'v1',
        status: 'Failure',
        message: 'Method not allowed',
        reason: 'MethodNotAllowed',
        code: 405
      });
      {{- end }}
    } catch (error) {
      next(error);
    }
  });
  {{- end }}

  return router;
}
