import * as http from 'http';
import * as fs from 'fs';
import * as path from 'path';
import swaggerUI from 'swagger-ui-express';
import jsYaml from 'js-yaml';
import express, { Express, Request, Response, NextFunction } from 'express';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import bodyParser from 'body-parser';
import { middleware } from 'express-openapi-validator';
import logger from './logger';
import config from './config';
import router from './routes/router';
class ExpressServer {
  public port: number;
  public app: Express;
  public openApiPath: string;
  public schema: any;
  private server?: http.Server;

  constructor(port: number, openApiYaml: string) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    try {
      this.schema = jsYaml.safeLoad(fs.readFileSync(openApiYaml, 'utf8'));
    } catch (e: any) {
      logger.error('failed to start Express Server', e.message);
    }
    this.setupMiddleware();
  }

  private setupMiddleware(): void {
    // this.setupAllowedMedia();
    this.app.use(cors());
    this.app.use(bodyParser.json({ limit: '14MB' }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    // this.app.use(cookieParser());

    // Simple test endpoint
    this.app.get('/hello', (req: Request, res: Response) => { res.send(`Hello World. path: ${this.openApiPath}`) });

    // Serve the OpenAPI document as generated by the generator.
    this.app.get('/openapi', (req: Request, res: Response) =>
      res.sendFile(path.join(__dirname, 'api', 'openapi.yaml'))
    );

    // Swagger UI endpoint.
    this.app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema));

    this.app.get('/login-redirect', (req: Request, res: Response) => {
      res.status(200).json(req.query);
    });

    this.app.get('/oauth2-redirect.html', (req: Request, res: Response) => {
      res.status(200).json(req.query);
    });


    // Mount OpenApiValidator middleware.
    this.app.use(
      middleware({
        apiSpec: this.openApiPath,
        validateSecurity: false,
        validateRequests: false,
        operationHandlers: path.join(__dirname),
        fileUploader: { dest: config.FILE_UPLOAD_PATH },
      })
    );
  }

  public launch(): void {
    // List routes for debugging purposes.
    const listRoutes = (app: Express): void => {
      // _router is not officially typed, so we cast to any.
      (app as any)._router.stack.forEach((middleware: any) => {
        if (middleware.route) {
          const methods = Object.keys(middleware.route.methods)
            .map((m) => m.toUpperCase())
            .join(', ');
          console.log(`${methods} ${middleware.route.path}`);
        } else if (middleware.name === 'router' && middleware.handle.stack) {
          middleware.handle.stack.forEach((handler: any) => {
            if (handler.route) {
              const methods = Object.keys(handler.route.methods)
                .map((m) => m.toUpperCase())
                .join(', ');
              console.log(`${methods} ${handler.route.path}`);
            }
          });
        }
      });
    };

    listRoutes(this.app);
    // Error-handling middleware.
    this.app.use((err: any, req: Request, res: Response, next: NextFunction) => {
      res.status(err.status || 500).json({
        message: err.message || err,
        errors: err.errors || '',
      });
    });

    this.server = http.createServer(this.app).listen(this.port, () => {
      console.log(`Listening on port ${this.port}`);
    });
  }

  public async close(): Promise<void> {
    if (this.server !== undefined) {
      await new Promise<void>((resolve, reject) => {
        this.server!.close((err?: Error) => {
          if (err) return reject(err);
          resolve();
        });
      });
      console.log(`Server on port ${this.port} shut down`);
    }
  }
}

export default ExpressServer;
