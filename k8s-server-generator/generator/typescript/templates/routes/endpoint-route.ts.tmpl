// endpoint-route.ts.tmpl
import express from 'express';
import { Storage } from '../storage/Storage';
import { logger } from '../logger';
import { handleResourceError } from '../utils';

export function create{{ .ResourceType }}Routes(storage: Storage): express.Router {
  const router = express.Router();

  {{- range .Endpoints }}
  {{- if eq .Method "get" }}
    {{ $parts := split .Path "/" }}
  {{ $lastPart := index $parts (sub (len $parts) 1) }}
  {{ if eq $lastPart ":name" }}
  // Get specific {{ $.ResourceType }}
  router.get('{{ .Path }}', async (req, res, next) => {
    try {
      {{- if .Namespaced }}
      const namespace = req.params.namespace;
      const name = req.params.name;
      logger.info(`Getting {{ $.ResourceType }} ${name} in namespace ${namespace}`);
      
      const resource = await storage.getResource('{{ $.ResourceType }}', name, namespace);
      
      if (!resource) {
        return handleResourceError(new Error(`{{ $.ResourceType }} ${name} not found in namespace ${namespace}`), res);
      }
      {{- else }}
      const name = req.params.name;
      logger.info(`Getting {{ $.ResourceType }} ${name}`);
      
      const resource = await storage.getResource('{{ $.ResourceType }}', name);
      
      if (!resource) {
        return handleResourceError(new Error(`{{ $.ResourceType }} ${name} not found`), res);
      }
      {{- end }}
      
      res.json(resource);
    } catch (error) {
      next(error);
    }
  });
  {{- else }}
  // List {{ $.ResourceType }}
  router.get('{{ .Path }}', async (req, res, next) => {
    try {
      {{- if .Namespaced }}
      const namespace = req.params.namespace;
      logger.info(`Listing {{ $.ResourceType }} in namespace ${namespace}`);
      
      const resources = await storage.listResources('{{ $.ResourceType }}', namespace);
      {{- else }}
      logger.info(`Listing {{ $.ResourceType }}`);
      
      const resources = await storage.listResources('{{ $.ResourceType }}');
      {{- end }}
      
      const response = {
        kind: '{{ $.ResourceType | title }}List',
        apiVersion: '{{ if hasSubstring .Path "/apis/" }}{{ index (split .Path "/") 2 }}/{{ index (split .Path "/") 3 }}{{ else }}v1{{ end }}',
        metadata: {
          resourceVersion: '1'
        },
        items: resources || []
      };
      
      res.json(response);
    } catch (error) {
      next(error);
    }
  });
  {{- end }}
  {{- end }}
  
  {{- if eq .Method "post" }}
  // Create {{ $.ResourceType }}
  router.post('{{ .Path }}', async (req, res, next) => {
    try {
      {{- if .Namespaced }}
      const namespace = req.params.namespace;
      logger.info(`Creating {{ $.ResourceType }} in namespace ${namespace}`);
      
      const resource = req.body;
      
      // Ensure resource has metadata
      if (!resource.metadata) {
        resource.metadata = {};
      }
      
      // Set namespace in metadata
      resource.metadata.namespace = namespace;
      {{- else }}
      logger.info(`Creating {{ $.ResourceType }}`);
      
      const resource = req.body;
      
      // Ensure resource has metadata
      if (!resource.metadata) {
        resource.metadata = {};
      }
      {{- end }}
      
      const createdResource = await storage.createOrUpdateResource('{{ $.ResourceType }}', resource);
      
      res.status(201).json(createdResource);
    } catch (error) {
      next(error);
    }
  });
  {{- end }}
  
  {{- if eq .Method "put" }}
  // Update {{ $.ResourceType }}
  router.put('{{ .Path }}', async (req, res, next) => {
    try {
      {{- if .Namespaced }}
      const namespace = req.params.namespace;
      const name = req.params.name;
      logger.info(`Updating {{ $.ResourceType }} ${name} in namespace ${namespace}`);
      
      const resource = req.body;
      
      // Ensure resource has metadata
      if (!resource.metadata) {
        resource.metadata = {};
      }
      
      // Set name and namespace in metadata
      resource.metadata.name = name;
      resource.metadata.namespace = namespace;
      {{- else }}
      const name = req.params.name;
      logger.info(`Updating {{ $.ResourceType }} ${name}`);
      
      const resource = req.body;
      
      // Ensure resource has metadata
      if (!resource.metadata) {
        resource.metadata = {};
      }
      
      // Set name in metadata
      resource.metadata.name = name;
      {{- end }}
      
      const updatedResource = await storage.createOrUpdateResource('{{ $.ResourceType }}', resource);
      
      res.json(updatedResource);
    } catch (error) {
      next(error);
    }
  });
  {{- end }}
  
  {{- if eq .Method "delete" }}
  // Delete {{ $.ResourceType }}
  router.delete('{{ .Path }}', async (req, res, next) => {
    try {
      {{- if .Namespaced }}
      const namespace = req.params.namespace;
      const name = req.params.name;
      logger.info(`Deleting {{ $.ResourceType }} ${name} in namespace ${namespace}`);
      try {

        const deleted = await storage.deleteResource('{{ $.ResourceType }}', name, namespace);
        
        if (!deleted) {
          return handleResourceError(new Error(`{{ $.ResourceType }} ${name} not found in namespace ${namespace}`), res);
        }
      } catch(e) {
          return handleResourceError(new Error(`{{ $.ResourceType }} ${name} not deleted in namespace ${namespace}. Error: ${(e as Error).message)}`), res);
      }
      {{- else }}
      const name = req.params.name;
      logger.info(`Deleting {{ $.ResourceType }} ${name}`);
      
      try {

        const deleted = await storage.deleteResource('{{ $.ResourceType }}', name);
        
        if (!deleted) {
          return handleResourceError(new Error(`{{ $.ResourceType }} ${name} not found}`), res);
        }
      } catch(e) {
          return handleResourceError(new Error(`{{ $.ResourceType }} ${name} not deleted. Error: ${(e as Error).message)}`), res);
      }
      {{- end }}
      
      res.status(200).json({
        kind: 'Status',
        apiVersion: 'v1',
        metadata: {},
        status: 'Success',
        details: {
          name: name,
          kind: '{{ $.ResourceType }}'
        }
      });
    } catch (error) {
      next(error);
    }
  });
  {{- end }}
  {{- end }}

  return router;
}
