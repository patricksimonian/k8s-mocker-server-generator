import { Router } from 'express';
import { logger } from '../logger';
import storage from '../storage';
import { StorageError } from '../storage/StorageError';

/**
 * Create {{ .Resource }} routes
 */
export function create{{ .Resource }}Routes(): Router {
  const router = Router();

  {{- range .Endpoints }}
  /**
   * {{ .Summary }}
   * {{ .Description }}
   */
  router.{{ .Method }}('{{ .Path }}', async (req, res, next) => {
    try {
      logger.debug(`{{ .Method | upper }} {{ .Path }} called with params:`, req.params);
      
      {{- if eq .Method "get" }}
      // Handle GET request
      {{- if contains .Path ":name" }}
      // Get single resource
      const name = req.params.name;
      const namespace = req.params.namespace || 'default';
      
      const resource = await storage.get{{ .Tags | first }}(name, namespace);
      return res.json(resource);
      {{- else }}
      // List resources
      const namespace = req.params.namespace || 'default';
      const resources = await storage.list{{ .Tags | first }}(namespace);
      return res.json({
        kind: '{{ .Tags | first }}List',
        apiVersion: 'v1',
        items: resources
      });
      {{- end }}
      {{- else if eq .Method "post" }}
      // Handle POST request
      const namespace = req.params.namespace || 'default';
      const resource = req.body;
      
      const created = await storage.create{{ .Tags | first }}(resource, namespace);
      return res.status(201).json(created);
      {{- else if eq .Method "put" }}
      // Handle PUT request
      const name = req.params.name;
      const namespace = req.params.namespace || 'default';
      const resource = req.body;
      
      const updated = await storage.update{{ .Tags | first }}(name, resource, namespace);
      return res.json(updated);
      {{- else if eq .Method "delete" }}
      // Handle DELETE request
      const name = req.params.name;
      const namespace = req.params.namespace || 'default';
      
      await storage.delete{{ .Tags | first }}(name, namespace);
      return res.status(200).json({
        kind: 'Status',
        apiVersion: 'v1',
        status: 'Success',
        message: `{{ .Tags | first }} "${name}" deleted`
      });
      {{- else }}
      // Handle other methods
      return res.status(405).json({
        kind: 'Status',
        apiVersion: 'v1',
        status: 'Failure',
        message: 'Method not allowed',
        reason: 'MethodNotAllowed',
        code: 405
      });
      {{- end }}
    } catch (error) {
      next(error);
    }
  });
  {{- end }}

  return router;
}

