
import jsYaml from 'js-yaml'
import { writeFileSync, readFileSync } from 'fs';
import _ from 'lodash';
import { OpenAPIV3 } from 'express-openapi-validator/dist/framework/types';

import path from 'path';


const schema = jsYaml.load(readFileSync('api/openapi.yaml', 'utf8')) as OpenAPIV3.Document;

export interface APIRoute { method: keyof OpenAPIV3.PathItemObject, controllerFn: string | null, controllerFnPath: string | null, path: string, file: string }
export function convertOpenApiPathToExpressPath(path: string) {
    return path.replace(/{([^}]+)}/g, ':$1');
}

export function getAPIRoutes(): string[] {
    const apiRoutes: string[] = [];
    try {


        const paths = Object.keys(schema.paths);
        paths.forEach((path) => {
            apiRoutes.push(path);
        });


        return apiRoutes;
    } catch (e) {
        console.error('failed to start Express Server', (e).message);
        throw e
    }
}

export function getAPIEndPoints(routes: string[]): APIRoute[] {
    return _.flatten(routes.map((route) => {
        const methods = (schema as OpenAPIV3.Document).paths[route];
        const methodsKeys = Object.keys(methods) as unknown as (keyof OpenAPIV3.PathItemObject)[]

        return methodsKeys.map((method) => {
            return {
                method,
                controllerFnPath: (methods[method] as OpenAPIV3.OperationObject)['x-eov-operation-handler' as keyof OpenAPIV3.OperationObject] as string ?? null,
                controllerFn: (methods[method] as OpenAPIV3.OperationObject).operationId ?? null,
                path: convertOpenApiPathToExpressPath(route),
                file: route.replace('/api/', '').split('/').map((s) => s.charAt(0).toUpperCase() + s.slice(1)).join('') + 'Route.ts'
            }
        });
    }))
}

export function writeRouterFiles(routes: APIRoute[]) {
    const routesByPath = _.groupBy(_.filter(routes, r => r.controllerFn !== null), 'file');
    Object.keys(routesByPath).forEach((route) => {
        const routes = routesByPath[route];
        const fileContent = `// Path: routes/${route}
// This file is auto-generated. Do not edit this file.
import { Router } from 'express';

${routes.map((r) => `import { ${r.controllerFn} } from '../${r.controllerFnPath}'`).join('\n')}

import {router} from './router';

${routes.map((r) => `router.${r.method}('${r.path}', ${r.controllerFn})`).join('\n\n')}

export default router;
`
        writeFileSync(path.join(__dirname, `../routes/${route.replace(/^\./, "")}`), fileContent);
    }
    )
}


export function getAPIRoutesAndWriteFiles() {
    const routes = getAPIRoutes();
    const apiRoutes = getAPIEndPoints(routes);
    writeRouterFiles(apiRoutes);
}

getAPIRoutesAndWriteFiles();
